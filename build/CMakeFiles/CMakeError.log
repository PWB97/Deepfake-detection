Compiling the C compiler identification source file "CMakeCCompilerId.c" failed.
Compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc 
Build flags: 
Id flags:  

The output was:
1
ld: library not found for -lSystem
clang: error: linker command failed with exit code 1 (use -v to see invocation)


Performing C SOURCE FILE Test RIGHT_SHIFT_IS_UNSIGNED failed with the following compile output:
Change Dir: /Users/pu/Downloads/libjpeg-turbo-2.0.3/build/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_223ca/fast && /Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/cmTC_223ca.dir/build.make CMakeFiles/cmTC_223ca.dir/build
Building C object CMakeFiles/cmTC_223ca.dir/src.c.o
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc   -DRIGHT_SHIFT_IS_UNSIGNED -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk   -o CMakeFiles/cmTC_223ca.dir/src.c.o   -c /Users/pu/Downloads/libjpeg-turbo-2.0.3/build/CMakeFiles/CMakeTmp/src.c
/Users/pu/Downloads/libjpeg-turbo-2.0.3/build/CMakeFiles/CMakeTmp/src.c:10:22: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
        res |= (~0L) << (32-4);
               ~~~~~ ^
1 warning generated.
Linking C executable cmTC_223ca
/usr/local/Cellar/cmake/3.17.3/bin/cmake -E cmake_link_script CMakeFiles/cmTC_223ca.dir/link.txt --verbose=1
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc  -DRIGHT_SHIFT_IS_UNSIGNED -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names   CMakeFiles/cmTC_223ca.dir/src.c.o  -o cmTC_223ca 


...and run output:

Return value: 1
Source file was:

      #include <stdio.h>
      #include <stdlib.h>
      int is_shifting_signed (long arg) {
        long res = arg >> 4;
        if (res == -0x7F7E80CL)
          return 1; /* right shift is signed */
        /* see if unsigned-shift hack will fix it. */
        /* we can't just test exact value since it depends on width of long... */
        res |= (~0L) << (32-4);
        if (res == -0x7F7E80CL)
          return 0; /* right shift is unsigned */
        printf("Right shift isn't acting as I expect it to.\n");
        printf("I fear the JPEG software will not work at all.\n\n");
        return 0; /* try it with unsigned anyway */
      }
      int main (void) {
        exit(is_shifting_signed(-0x7F7E80B1L));
      }
Performing C SOURCE FILE Test __CHAR_UNSIGNED__ failed with the following compile output:
Change Dir: /Users/pu/Downloads/libjpeg-turbo-2.0.3/build/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_12c9d/fast && /Applications/Xcode.app/Contents/Developer/usr/bin/make  -f CMakeFiles/cmTC_12c9d.dir/build.make CMakeFiles/cmTC_12c9d.dir/build
Building C object CMakeFiles/cmTC_12c9d.dir/src.c.o
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc   -D__CHAR_UNSIGNED__ -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk   -o CMakeFiles/cmTC_12c9d.dir/src.c.o   -c /Users/pu/Downloads/libjpeg-turbo-2.0.3/build/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_12c9d
/usr/local/Cellar/cmake/3.17.3/bin/cmake -E cmake_link_script CMakeFiles/cmTC_12c9d.dir/link.txt --verbose=1
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc  -D__CHAR_UNSIGNED__ -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names   CMakeFiles/cmTC_12c9d.dir/src.c.o  -o cmTC_12c9d 


...and run output:

Return value: 1
Source file was:
int main(void) { return ((char) -1 < 0); }
Checking whether the ASM_NASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
NASM version 2.14.02 compiled on Sep 28 2019
Checking whether the ASM_NASM compiler is Clang using "--version" did not match "(clang version)":
NASM version 2.14.02 compiled on Sep 28 2019
Checking whether the ASM_NASM compiler is AppleClang using "--version" did not match "(Apple LLVM version)":
NASM version 2.14.02 compiled on Sep 28 2019
Checking whether the ASM_NASM compiler is ARMClang using "--version" did not match "armclang":
NASM version 2.14.02 compiled on Sep 28 2019
Checking whether the ASM_NASM compiler is HP using "-V" did not match "HP C":
nasm: error: unrecognised option `-V'
type `nasm -h' for help
Checking whether the ASM_NASM compiler is Intel using "--version" did not match "(ICC)":
NASM version 2.14.02 compiled on Sep 28 2019
Checking whether the ASM_NASM compiler is SunPro using "-V" did not match "Sun C":
nasm: error: unrecognised option `-V'
type `nasm -h' for help
Checking whether the ASM_NASM compiler is XL using "-qversion" did not match "XL C":
nasm: error: unrecognised option `-q'
type `nasm -h' for help
Checking whether the ASM_NASM compiler is MSVC using "-?" did not match "Microsoft":
nasm: error: unrecognised option `-?'
type `nasm -h' for help
Checking whether the ASM_NASM compiler is TI using "-h" did not match "Texas Instruments":
usage: nasm [-@ response file] [-o outfile] [-f format] [-l listfile]
            [options...] [--] filename
    or nasm -v (or --v) for version info


Response files should contain command line parameters,
one per line.

    -t            assemble in SciTech TASM compatible mode
    -E (or -e)    preprocess only (writes output to stdout by default)
    -a            don't preprocess (assemble only)
    -M            generate Makefile dependencies on stdout
    -MG           d:o, missing files assumed generated
    -MF file      set Makefile dependency file
    -MD file      assemble and generate dependencies
    -MT file      dependency target name
    -MQ file      dependency target name (quoted)
    -MP           emit phony target

    -Zfile        redirect error messages to file
    -s            redirect error messages to stdout

    -g            generate debugging information

    -F format     select a debugging format

    -gformat      same as -g -F format

    -o outfile    write output to an outfile

    -f format     select an output format

    -l listfile   write listing to a listfile

    -Ipath        add a pathname to the include file path
    -Oflags...    optimize opcodes, immediates and branch offsets
       -O0        no optimization
       -O1        minimal optimization
       -Ox        multipass optimization (default)
       -Ov        display the number of passes executed at the end
    -Pfile        pre-include a file (also --include)
    -Dmacro[=str] pre-define a macro
    -Umacro       undefine a macro
    -Xformat      specifiy error reporting format (gnu or vc)
    -w+foo        enable warning foo (equiv. -Wfoo)
    -w-foo        disable warning foo (equiv. -Wno-foo)
    -w[+-]error[=foo]
                  promote [specific] warnings to errors
    -h            show invocation summary and exit (also --help)

   --pragma str   pre-executes a specific %pragma
   --before str   add line (usually a preprocessor statement) before the input
   --prefix str   prepend the given string to all the given string
                  to all extern, common and global symbols (also --gprefix)
   --postfix str  append the given string to all the given string
                  to all extern, common and global symbols (also --gpostfix)
   --lprefix str  prepend the given string to all other symbols
   --lpostfix str append the given string to all other symbols
   --keep-all     output files will not be removed even if an error happens
   --no-line      ignore %line directives in input
   --limit-X val  set execution limit X
                     passes          total number of passes (default unlimited)
                     stalled-passes  number of passes without forward progress (default 1000)
                     macro-levels    levels of macro expansion (default 1000000)
                     rep             %rep count (default 1000000)
                     eval            expression evaluation descent (default 1000000)
                     lines           total source lines processed (default 2000000000)

Warnings for the -W/-w options: (default in brackets)
    macro-params            macro calls with wrong parameter count [on]
    macro-selfref           cyclic macro references [off]
    macro-defaults          macros with more default than optional parameters [on]
    orphan-labels           labels alone on lines without trailing `:' [on]
    number-overflow         numeric constant does not fit [on]
    gnu-elf-extensions      using 8- or 16-bit relocation in ELF32, a GNU extension [off]
    float-overflow          floating point overflow [on]
    float-denorm            floating point denormal [off]
    float-underflow         floating point underflow [off]
    float-toolong           too many digits in floating-point number [on]
    user                    %warning directives [on]
    lock                    lock prefix on unlockable instructions [on]
    hle                     invalid hle prefixes [on]
    bnd                     invalid bnd prefixes [on]
    zext-reloc              relocation zero-extended to match output format [on]
    ptr                     non-NASM keyword used in other assemblers [on]
    bad-pragma              empty or malformed %pragma [off]
    unknown-pragma          unknown %pragma facility or directive [off]
    not-my-pragma           %pragma not applicable to this compilation [off]
    unknown-warning         unknown warning in -W/-w or warning directive [off]
    negative-rep            regative %rep count [on]
    phase                   phase error during stabilization [off]
    label-redef             label redefined to an identical value [off]
    label-redef-late        label (re)defined during code generation [error]
    other                   any warning not specifially mentioned above [on]
    all                     all possible warnings

For a list of valid output formats, use -hf.
For a list of debug formats, use -f <format> -y.
Checking whether the ASM_NASM compiler is IAR using "" did not match "IAR Assembler":
nasm: fatal: no input file specified
type `nasm -h' for help
Checking whether the ASM_NASM compiler is ARMCC using "" did not match "(ARM Compiler)|(ARM Assembler)":
nasm: fatal: no input file specified
type `nasm -h' for help
